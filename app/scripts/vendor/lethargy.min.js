(function () {
  var t
  t = typeof exports !== 'undefined' && exports !== null
    ? exports
    : this,
  t.Lethargy = (function () {
    function t (t, s, i, l) {
      this.stability = t != null
        ? Math.abs(t)
        : 8,
      this.sensitivity = s != null
        ? 1 + Math.abs(s)
        : 100,
      this.tolerance = i != null
        ? 1 + Math.abs(i)
        : 1.1,
      this.delay = l != null
        ? l
        : 150,
      this.lastUpDeltas = (function () {
        var t,
          s,
          i
        for (
          i = [], t = 1, s = 2 * this.stability; s >= 1
            ? s >= t
            : t >= s; s >= 1
            ? t++
            : t--)
          i.push(null)
        return i
      }.call(this)),
      this.lastDownDeltas = (function () {
        var t,
          s,
          i
        for (
          i = [], t = 1, s = 2 * this.stability; s >= 1
            ? s >= t
            : t >= s; s >= 1
            ? t++
            : t--)
          i.push(null)
        return i
      }.call(this)),
      this.deltasTimestamp = (function () {
        var t,
          s,
          i
        for (
          i = [], t = 1, s = 2 * this.stability; s >= 1
            ? s >= t
            : t >= s; s >= 1
            ? t++
            : t--)
          i.push(null)
        return i
      }.call(this))
    }
    return t.prototype.check = function (t) {
      var s
      return t = t.originalEvent || t,
      t.wheelDelta != null
        ? s = t.wheelDelta
        : t.deltaY != null
          ? s = -40 * t.deltaY
          : (t.detail != null || t.detail === 0) && (s = -40 * t.detail),
      this.deltasTimestamp.push(Date.now()),
      this.deltasTimestamp.shift(),
      s > 0
        ? (this.lastUpDeltas.push(s), this.lastUpDeltas.shift(), this.isInertia(1))
        : (this.lastDownDeltas.push(s), this.lastDownDeltas.shift(), this.isInertia(-1))
    },
    t.prototype.isInertia = function (t) {
      var s,
        i,
        l,
        a,
        e,
        n,
        h
      return s = t === -1
        ? this.lastDownDeltas
        : this.lastUpDeltas,
      s[0] === null
        ? t
        : this.deltasTimestamp[2 * this.stability - 2] + this.delay > Date.now() && s[0] === s[2 * this.stability - 1]
          ? !1
          : (
            l = s.slice(0, this.stability), i = s.slice(this.stability, 2 * this.stability), h = l.reduce(function (t, s) {
              return t + s
            }), e = i.reduce(function (t, s) {
              return t + s
            }), n = h / l.length, a = e / i.length, Math.abs(n) < Math.abs(a * this.tolerance) && this.sensitivity < Math.abs(a)
              ? t
              : !1)
    },
    t.prototype.showLastUpDeltas = function () {
      return this.lastUpDeltas
    },
    t.prototype.showLastDownDeltas = function () {
      return this.lastDownDeltas
    },
    t
  }())
}).call(this)
